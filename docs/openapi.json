{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Diff Tool REST API",
    "version" : "v1"
  },
  "paths" : {
    "/api/context" : {
      "get" : {
        "operationId" : "getContext",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Context"
                }
              }
            },
            "description" : "Context information"
          }
        },
        "summary" : "Returns basic context information of Polarion's extension",
        "tags" : [ "Extension Information" ]
      }
    },
    "/api/conversion/html-to-pdf" : {
      "post" : {
        "operationId" : "convertHtmlToPdf",
        "parameters" : [ {
          "description" : "default value: landscape",
          "in" : "query",
          "name" : "orientation",
          "schema" : {
            "type" : "string",
            "description" : "Enum representing print orientations",
            "enum" : [ "PORTRAIT", "LANDSCAPE" ]
          }
        }, {
          "description" : "default value: A4",
          "in" : "query",
          "name" : "paperSize",
          "schema" : {
            "type" : "string",
            "description" : "Enum representing print paper sizes",
            "enum" : [ "A4", "A3" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "text/html" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "description" : "input html (must include html and body elements)"
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/pdf" : { }
            },
            "description" : "Content of PDF document as a byte array"
          }
        },
        "summary" : "Converts input HTML to PDF",
        "tags" : [ "Conversion" ]
      }
    },
    "/api/diff/documents" : {
      "post" : {
        "operationId" : "getDocumentsDiff",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DocumentsDiffParams"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentsDiff"
                }
              }
            },
            "description" : "Successfully retrieved the differences between the provided documents"
          }
        },
        "summary" : "Gets difference of two live documents",
        "tags" : [ "Difference" ]
      }
    },
    "/api/diff/html" : {
      "post" : {
        "operationId" : "diffHtml",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "html1" : {
                    "type" : "string"
                  },
                  "html2" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringsDiff"
                }
              }
            },
            "description" : "Successfully retrieved the differences between the provided HTML strings"
          }
        },
        "summary" : "Gets difference of two strings which contain HTML tags",
        "tags" : [ "Difference" ]
      }
    },
    "/api/diff/text" : {
      "post" : {
        "operationId" : "diffText",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "text1" : {
                    "type" : "string"
                  },
                  "text2" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringsDiff"
                }
              }
            },
            "description" : "Successfully retrieved the differences between the provided plain text strings"
          }
        },
        "summary" : "Gets difference of two strings which contain plain text",
        "tags" : [ "Difference" ]
      }
    },
    "/api/diff/workitems" : {
      "post" : {
        "operationId" : "getWorkItemsDiff",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WorkItemsDiffParams"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkItemsDiff"
                }
              }
            },
            "description" : "Successfully retrieved the differences between the provided WorkItems"
          }
        },
        "summary" : "Gets difference of two WorkItems",
        "tags" : [ "Difference" ]
      }
    },
    "/api/merge/workitems" : {
      "post" : {
        "operationId" : "mergeWorkItems",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergeParams"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergeResult"
                }
              }
            },
            "description" : "Merge result"
          }
        },
        "summary" : "Merge WorkItems",
        "tags" : [ "Merge" ]
      }
    },
    "/api/projects/{projectId}/spaces" : {
      "get" : {
        "operationId" : "getSpaces",
        "parameters" : [ {
          "in" : "path",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Space"
                }
              }
            },
            "description" : "List of spaces"
          }
        },
        "summary" : "Gets list of spaces (folders) located in specified project",
        "tags" : [ "Utility API" ]
      }
    },
    "/api/projects/{projectId}/spaces/{spaceId}/documents" : {
      "get" : {
        "operationId" : "getDocuments",
        "parameters" : [ {
          "in" : "path",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "spaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Document"
                }
              }
            },
            "description" : "List of documents"
          }
        },
        "summary" : "Gets list of documents located in specified space of specified project",
        "tags" : [ "Utility API" ]
      }
    },
    "/api/projects/{projectId}/spaces/{spaceId}/documents/{docName}/revisions" : {
      "get" : {
        "operationId" : "getDocumentRevisions",
        "parameters" : [ {
          "in" : "path",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "spaceId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "docName",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DocumentRevision"
                }
              }
            },
            "description" : "List of revisions for the specified document"
          }
        },
        "summary" : "Gets list of revisions for the document located in specified space of specified project",
        "tags" : [ "Utility API" ]
      }
    },
    "/api/projects/{projectId}/workitem-fields" : {
      "get" : {
        "operationId" : "getAllWorkItemFields",
        "parameters" : [ {
          "in" : "path",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WorkItemField"
                }
              }
            },
            "description" : "List of all work item fields for the specified project"
          }
        },
        "summary" : "Gets full list of all general and custom fields configured for all kind of work items in specified project",
        "tags" : [ "Utility API" ]
      }
    },
    "/api/projects/{projectId}/workitem-statuses" : {
      "get" : {
        "operationId" : "getAllWorkItemStatuses",
        "parameters" : [ {
          "in" : "path",
          "name" : "projectId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IStatusOpt"
                }
              }
            },
            "description" : "List of all work item statuses for the specified project"
          }
        },
        "summary" : "Gets list of all statuses configured for all kind of work items in specified project",
        "tags" : [ "Utility API" ]
      }
    },
    "/api/settings" : {
      "get" : {
        "operationId" : "readFeaturesList_1",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "description" : "List of supported features"
          }
        },
        "summary" : "Returns the complete list of all supported features",
        "tags" : [ "Settings" ]
      }
    },
    "/api/settings/{feature}/default-content" : {
      "get" : {
        "operationId" : "getDefaultValues_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SettingsModel"
                }
              }
            },
            "description" : "Default values"
          }
        },
        "summary" : "Returns default values of specified setting",
        "tags" : [ "Settings" ]
      }
    },
    "/api/settings/{feature}/names" : {
      "get" : {
        "operationId" : "readSettingNames_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SettingName"
                }
              }
            },
            "description" : "List of setting names"
          }
        },
        "summary" : "Returns names of specified setting",
        "tags" : [ "Settings" ]
      }
    },
    "/api/settings/{feature}/names/{name}" : {
      "delete" : {
        "operationId" : "deleteSetting_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Setting deleted successfully"
          }
        },
        "summary" : "Deletes specified setting by id",
        "tags" : [ "Settings" ]
      },
      "post" : {
        "operationId" : "renameSetting_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Setting name updated successfully"
          }
        },
        "summary" : "Updates name of specified named setting",
        "tags" : [ "Settings" ]
      }
    },
    "/api/settings/{feature}/names/{name}/content" : {
      "get" : {
        "operationId" : "readSetting_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "revision",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SettingsModel"
                }
              }
            },
            "description" : "Setting content"
          }
        },
        "summary" : "Returns values (content) of specified setting by its id and revision",
        "tags" : [ "Settings" ]
      },
      "put" : {
        "operationId" : "saveSetting_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Setting created/updated successfully"
          }
        },
        "summary" : "Creates or updates named setting. Creation scenario will use default setting value if no body specified in the request.",
        "tags" : [ "Settings" ]
      }
    },
    "/api/settings/{feature}/names/{name}/revisions" : {
      "get" : {
        "operationId" : "readRevisionsList_1",
        "parameters" : [ {
          "in" : "path",
          "name" : "feature",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "path",
          "name" : "name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Revision"
                }
              }
            },
            "description" : "List of revisions"
          }
        },
        "summary" : "Returns revisions history of specified setting with specified id",
        "tags" : [ "Settings" ]
      }
    },
    "/api/version" : {
      "get" : {
        "operationId" : "getVersion",
        "responses" : {
          "default" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Version"
                }
              }
            },
            "description" : "Version information"
          }
        },
        "summary" : "Returns version of Polarion's extension",
        "tags" : [ "Extension Information" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Context" : {
        "type" : "object",
        "description" : "Represents the context for building URLs related to Polarion services",
        "properties" : {
          "baseUrl" : {
            "type" : "string",
            "description" : "Returns the base URL constructed with the extension context",
            "example" : "/polarion/pdf-exporter"
          },
          "extensionContext" : {
            "type" : "string",
            "description" : "The extension context used as a base for URL construction",
            "example" : "pdf-exporter"
          },
          "restUrl" : {
            "type" : "string",
            "description" : "Returns the REST API URL constructed with the extension context",
            "example" : "/polarion/pdf-exporter/rest"
          },
          "swaggerUiUrl" : {
            "type" : "string",
            "description" : "Returns the Swagger UI URL for the REST API"
          }
        }
      },
      "Document" : {
        "type" : "object",
        "description" : "Represents a document within a project, including metadata such as projectID, space ID, and revision details",
        "properties" : {
          "authorizedForMerge" : {
            "type" : "boolean",
            "description" : "Indicates whether the user is authorized for merge operations"
          },
          "headRevision" : {
            "type" : "string",
            "description" : "The head revision of the document"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the document"
          },
          "locationPath" : {
            "type" : "string",
            "description" : "The location path of the document"
          },
          "moduleXmlRevision" : {
            "type" : "string",
            "description" : "The XML revision of the module"
          },
          "projectId" : {
            "type" : "string",
            "description" : "The ID of the project this document belongs to"
          },
          "projectName" : {
            "type" : "string",
            "description" : "The name of the project this document belongs to"
          },
          "revision" : {
            "type" : "string",
            "description" : "The current revision of the document"
          },
          "spaceId" : {
            "type" : "string",
            "description" : "The ID of the space where the document is located"
          },
          "spaceName" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string",
            "description" : "The title of the document"
          }
        }
      },
      "DocumentIdentifier" : {
        "type" : "object",
        "description" : "Unique document identifier data",
        "properties" : {
          "moduleXmlRevision" : {
            "type" : "string",
            "description" : "XML module revision number"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the document"
          },
          "projectId" : {
            "type" : "string",
            "description" : "ID of the project"
          },
          "revision" : {
            "type" : "string",
            "description" : "Revision number of the document"
          },
          "spaceId" : {
            "type" : "string",
            "description" : "ID of the space"
          }
        }
      },
      "DocumentRevision" : {
        "type" : "object",
        "description" : "Revision details",
        "properties" : {
          "baselineName" : {
            "type" : "string",
            "description" : "The baseline of the revision"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the revision"
          }
        }
      },
      "DocumentWorkItem" : {
        "type" : "object",
        "description" : "WorkItem in document data",
        "properties" : {
          "documentLocationPath" : {
            "type" : "string",
            "description" : "The location path of the document containing the WorkItem"
          },
          "documentProjectId" : {
            "type" : "string",
            "description" : "The project ID of the document containing the WorkItem"
          },
          "documentRevision" : {
            "type" : "string",
            "description" : "The revision of the document containing the WorkItem"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the WorkItem"
          },
          "projectId" : {
            "type" : "string",
            "description" : "WorkItem's project ID, it can differ from document's project ID in case of referenced WorkItems"
          },
          "revision" : {
            "type" : "string",
            "description" : "The revision of the WorkItem. Referenced WorkItem's can be frozen in document in certain revision"
          }
        }
      },
      "DocumentsDiff" : {
        "type" : "object",
        "description" : "Represents the difference between two documents",
        "properties" : {
          "extensionInfo" : {
            "type" : "string",
            "description" : "Information about extension (version, build timestamp)"
          },
          "leftDocument" : {
            "$ref" : "#/components/schemas/Document"
          },
          "pairedWorkItems" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "rightDocument" : {
            "$ref" : "#/components/schemas/Document"
          }
        }
      },
      "DocumentsDiffParams" : {
        "type" : "object",
        "description" : "Comparison input data",
        "properties" : {
          "configCacheBucketId" : {
            "type" : "string",
            "description" : "The ID of the configuration cache bucket"
          },
          "configName" : {
            "type" : "string",
            "description" : "The configuration name to use for the comparison"
          },
          "leftDocument" : {
            "$ref" : "#/components/schemas/DocumentIdentifier"
          },
          "linkRole" : {
            "type" : "string",
            "description" : "The role of the link connecting the two documents"
          },
          "rightDocument" : {
            "$ref" : "#/components/schemas/DocumentIdentifier"
          }
        }
      },
      "Field" : {
        "type" : "object",
        "description" : "Represents a field within a work item",
        "properties" : {
          "html" : {
            "type" : "string",
            "description" : "HTML representation of the field"
          },
          "htmlDiff" : {
            "type" : "string",
            "description" : "HTML diff representation of the field"
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the field"
          },
          "issues" : {
            "type" : "array",
            "description" : "Set of issues related to the field",
            "items" : {
              "type" : "string",
              "description" : "Set of issues related to the field"
            },
            "uniqueItems" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the field"
          },
          "type" : {
            "$ref" : "#/components/schemas/IType"
          },
          "value" : {
            "type" : "object",
            "description" : "Value of the field"
          }
        }
      },
      "FieldDiff" : {
        "type" : "object",
        "description" : "Represents the differences between fields in WorkItems",
        "properties" : {
          "diffLeft" : {
            "type" : "string",
            "description" : "Difference on the left side"
          },
          "diffRight" : {
            "type" : "string",
            "description" : "Difference on the right side"
          },
          "id" : {
            "type" : "string",
            "description" : "Field ID"
          },
          "issues" : {
            "type" : "array",
            "description" : "Set of issues related to this field",
            "items" : {
              "type" : "string",
              "description" : "Set of issues related to this field"
            },
            "uniqueItems" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Field name"
          }
        }
      },
      "IStatusOpt" : {
        "type" : "object",
        "properties" : {
          "default" : {
            "type" : "boolean"
          },
          "enumId" : {
            "type" : "string"
          },
          "hidden" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "phantom" : {
            "type" : "boolean"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "sequenceNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "terminal" : {
            "type" : "boolean"
          }
        }
      },
      "IType" : {
        "type" : "object",
        "description" : "Type of the field"
      },
      "MergeParams" : {
        "type" : "object",
        "description" : "Merge input data",
        "properties" : {
          "configCacheBucketId" : {
            "type" : "string",
            "description" : "The ID of the configuration cache bucket"
          },
          "configName" : {
            "type" : "string",
            "description" : "The configuration name to use for the merge operation"
          },
          "direction" : {
            "type" : "string",
            "description" : "Enum representing the direction of a merge operation",
            "enum" : [ "LEFT_TO_RIGHT", "RIGHT_TO_LEFT" ]
          },
          "leftDocument" : {
            "$ref" : "#/components/schemas/DocumentIdentifier"
          },
          "linkRole" : {
            "type" : "string",
            "description" : "The role of the link connecting the two documents"
          },
          "pairs" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "rightDocument" : {
            "$ref" : "#/components/schemas/DocumentIdentifier"
          }
        }
      },
      "MergeResult" : {
        "type" : "object",
        "description" : "Result of a merge operation",
        "properties" : {
          "conflictedPairs" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "createdPairs" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "mergeNotAuthorized" : {
            "type" : "boolean",
            "description" : "Indicates whether the merge was not authorized"
          },
          "modifiedPairs" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "movedPairs" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "notMovedPairs" : {
            "$ref" : "#/components/schemas/WorkItemsPair"
          },
          "success" : {
            "type" : "boolean",
            "description" : "Indicates whether the merge operation was successful"
          },
          "targetModuleHasStructuralChanges" : {
            "type" : "boolean",
            "description" : "Indicates whether the target module has structural changes"
          }
        }
      },
      "Revision" : {
        "type" : "object",
        "description" : "Revision details",
        "properties" : {
          "author" : {
            "type" : "string",
            "description" : "The author of the revision"
          },
          "baseline" : {
            "type" : "string",
            "description" : "The baseline of the revision"
          },
          "date" : {
            "type" : "string",
            "description" : "The date of the revision"
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the revision"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the revision"
          }
        }
      },
      "SettingName" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the setting"
          },
          "scope" : {
            "type" : "string",
            "description" : "The scope of the setting"
          }
        }
      },
      "SettingsModel" : {
        "type" : "object",
        "description" : "Settings model",
        "properties" : {
          "bundleTimestamp" : {
            "type" : "string",
            "description" : "The bundle timestamp of the setting"
          }
        }
      },
      "Space" : {
        "type" : "object",
        "description" : "Represents a space within a project",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Space ID"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the space"
          }
        }
      },
      "StringsDiff" : {
        "type" : "object",
        "description" : "Represents the result of comparing two strings",
        "properties" : {
          "different" : {
            "type" : "boolean",
            "description" : "Indicates whether the two strings are different"
          },
          "result" : {
            "type" : "string",
            "description" : "The result after comparing the strings"
          }
        }
      },
      "Version" : {
        "type" : "object",
        "description" : "Details about the software version",
        "properties" : {
          "automaticModuleName" : {
            "type" : "string",
            "description" : "The automatic module name"
          },
          "bundleBuildTimestamp" : {
            "type" : "string",
            "description" : "The build timestamp of the bundle"
          },
          "bundleName" : {
            "type" : "string",
            "description" : "The name of the bundle"
          },
          "bundleVendor" : {
            "type" : "string",
            "description" : "The vendor of the bundle"
          },
          "bundleVersion" : {
            "type" : "string",
            "description" : "The version of the bundle"
          },
          "projectURL" : {
            "type" : "string",
            "description" : "The project URL"
          },
          "supportEmail" : {
            "type" : "string",
            "description" : "Support email for the bundle"
          }
        }
      },
      "WorkItem" : {
        "type" : "object",
        "description" : "Represents a WorkItem",
        "properties" : {
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Field"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "Unique identifier of the WorkItem"
          },
          "lastRevision" : {
            "type" : "string",
            "description" : "Last revision number of the WorkItem"
          },
          "moveDirection" : {
            "type" : "string",
            "description" : "Enum representing the direction in which a merge move operation can occur",
            "enum" : [ "UP", "DOWN" ]
          },
          "movedOutlineNumber" : {
            "type" : "string",
            "description" : "Moved outline number of the work item after a merge"
          },
          "outlineNumber" : {
            "type" : "string",
            "description" : "Outline number of the WorkItem"
          },
          "projectId" : {
            "type" : "string",
            "description" : "Project ID associated with the WorkItem"
          },
          "referenced" : {
            "type" : "boolean",
            "description" : "Flag indicating whether the WorkItem is referenced"
          },
          "revision" : {
            "type" : "string",
            "description" : "Revision number of the WorkItem"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the WorkItem"
          }
        }
      },
      "WorkItemField" : {
        "type" : "object",
        "description" : "WorkItem field data",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Unique key for the field"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the field"
          },
          "wiTypeId" : {
            "type" : "string",
            "description" : "WorkItem type ID"
          },
          "wiTypeName" : {
            "type" : "string",
            "description" : "WorkItem type name"
          }
        }
      },
      "WorkItemsDiff" : {
        "type" : "object",
        "description" : "Represents the differences between two WorkItems",
        "properties" : {
          "fieldDiffs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDiff"
            }
          },
          "leftWorkItem" : {
            "$ref" : "#/components/schemas/WorkItem"
          },
          "rightWorkItem" : {
            "$ref" : "#/components/schemas/WorkItem"
          }
        }
      },
      "WorkItemsDiffParams" : {
        "type" : "object",
        "description" : "Comparison input data",
        "properties" : {
          "configCacheBucketId" : {
            "type" : "string",
            "description" : "Cache bucket Id"
          },
          "configName" : {
            "type" : "string",
            "description" : "Name of the configuration used for comparison"
          },
          "leftProjectId" : {
            "type" : "string",
            "description" : "ID of the left project"
          },
          "leftWorkItem" : {
            "$ref" : "#/components/schemas/DocumentWorkItem"
          },
          "pairedWorkItemsDiffer" : {
            "type" : "boolean",
            "description" : "Indicates if the paired WorkItems differ"
          },
          "pairedWorkItemsLinkRole" : {
            "type" : "string",
            "description" : "Link role between paired WorkItems"
          },
          "rightWorkItem" : {
            "$ref" : "#/components/schemas/DocumentWorkItem"
          }
        }
      },
      "WorkItemsPair" : {
        "type" : "object",
        "description" : "Represents a pair of WorkItems for comparison",
        "properties" : {
          "leftWorkItem" : {
            "$ref" : "#/components/schemas/WorkItem"
          },
          "rightWorkItem" : {
            "$ref" : "#/components/schemas/WorkItem"
          }
        }
      }
    }
  }
}