{
  "openapi": "3.0.1",
  "info": {
    "title": "Diff Tool REST API",
    "version": "v1"
  },
  "paths": {
    "/api/communication/settings": {
      "get": {
        "operationId": "getCommunicationSettings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationSettings"
                }
              }
            },
            "description": "Communication settings in JSON format"
          }
        },
        "summary": "Gets communication settings for JS client",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/context": {
      "get": {
        "operationId": "getContext",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Context"
                }
              }
            },
            "description": "Context information"
          }
        },
        "summary": "Returns basic context information of Polarion's extension",
        "tags": [
          "Extension Information"
        ]
      }
    },
    "/api/conversion/html-to-pdf": {
      "post": {
        "operationId": "convertHtmlToPdf",
        "parameters": [
          {
            "description": "default value: landscape",
            "in": "query",
            "name": "orientation",
            "schema": {
              "description": "Enum representing print orientations",
              "enum": [
                "PORTRAIT",
                "LANDSCAPE"
              ],
              "type": "string"
            }
          },
          {
            "description": "default value: A4",
            "in": "query",
            "name": "paperSize",
            "schema": {
              "description": "Enum representing print paper sizes",
              "enum": [
                "A4",
                "A3"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/html": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "input html (must include html and body elements)"
        },
        "responses": {
          "200": {
            "content": {
              "application/pdf": {}
            },
            "description": "Content of PDF document as a byte array"
          }
        },
        "summary": "Converts input HTML to PDF",
        "tags": [
          "Conversion"
        ]
      }
    },
    "/api/diff/documents": {
      "post": {
        "operationId": "getDocumentsDiff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentsDiffParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentsDiff"
                }
              }
            },
            "description": "Successfully retrieved the differences between the provided documents"
          }
        },
        "summary": "Gets difference of two live documents",
        "tags": [
          "Difference"
        ]
      }
    },
    "/api/diff/html": {
      "post": {
        "operationId": "diffHtml",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "html1": {
                    "type": "string"
                  },
                  "html2": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringsDiff"
                }
              }
            },
            "description": "Successfully retrieved the differences between the provided HTML strings"
          }
        },
        "summary": "Gets difference of two strings which contain HTML tags",
        "tags": [
          "Difference"
        ]
      }
    },
    "/api/diff/text": {
      "post": {
        "operationId": "diffText",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "text1": {
                    "type": "string"
                  },
                  "text2": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringsDiff"
                }
              }
            },
            "description": "Successfully retrieved the differences between the provided plain text strings"
          }
        },
        "summary": "Gets difference of two strings which contain plain text",
        "tags": [
          "Difference"
        ]
      }
    },
    "/api/diff/workitems": {
      "post": {
        "operationId": "getWorkItemsDiff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkItemsDiffParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsDiff"
                }
              }
            },
            "description": "Successfully retrieved the differences between the provided WorkItems"
          }
        },
        "summary": "Gets difference of two WorkItems",
        "tags": [
          "Difference"
        ]
      }
    },
    "/api/merge/workitems": {
      "post": {
        "operationId": "mergeWorkItems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeResult"
                }
              }
            },
            "description": "Merge result"
          }
        },
        "summary": "Merge WorkItems",
        "tags": [
          "Merge"
        ]
      }
    },
    "/api/projects/{projectId}/hyperlink-roles": {
      "get": {
        "operationId": "getAllHyperlinkRoles",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HyperlinkRole"
                }
              }
            },
            "description": "List of all hyperlink roles for the specified project"
          }
        },
        "summary": "Gets list of all hyperlink roles in the specified project",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/projects/{projectId}/spaces": {
      "get": {
        "operationId": "getSpaces",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            },
            "description": "List of spaces"
          }
        },
        "summary": "Gets list of spaces (folders) located in specified project",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/projects/{projectId}/spaces/{spaceId}/documents": {
      "get": {
        "operationId": "getDocuments",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "spaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            },
            "description": "List of documents"
          }
        },
        "summary": "Gets list of documents located in specified space of specified project",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/projects/{projectId}/spaces/{spaceId}/documents/{docName}/revisions": {
      "get": {
        "operationId": "getDocumentRevisions",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "spaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "docName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentRevision"
                }
              }
            },
            "description": "List of revisions for the specified document"
          }
        },
        "summary": "Gets list of revisions for the document located in specified space of specified project",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/projects/{projectId}/spaces/{spaceId}/documents/{documentName}/duplicate": {
      "post": {
        "operationId": "createDocumentDuplicate",
        "parameters": [
          {
            "description": "Project ID of source document",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Space ID of source document",
            "in": "path",
            "name": "spaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Source document name",
            "in": "path",
            "name": "documentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional revision of source document",
            "in": "query",
            "name": "revision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDuplicateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Document created successfully"
          },
          "409": {
            "description": "Target document already exists"
          }
        },
        "summary": "Creates a new document as a duplicate of specified one",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/projects/{projectId}/workitem-fields": {
      "get": {
        "operationId": "getAllWorkItemFields",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemField"
                }
              }
            },
            "description": "List of all work item fields for the specified project"
          }
        },
        "summary": "Gets full list of all general and custom fields configured for all kind of work items in specified project",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/projects/{projectId}/workitem-statuses": {
      "get": {
        "operationId": "getAllWorkItemStatuses",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IStatusOpt"
                }
              }
            },
            "description": "List of all work item statuses for the specified project"
          }
        },
        "summary": "Gets list of all statuses configured for all kind of work items in specified project",
        "tags": [
          "Utility API"
        ]
      }
    },
    "/api/settings": {
      "get": {
        "operationId": "readFeaturesList_1",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "List of supported features"
          }
        },
        "summary": "Returns the complete list of all supported features",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/default-content": {
      "get": {
        "operationId": "getDefaultValues_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsModel"
                }
              }
            },
            "description": "Default values"
          }
        },
        "summary": "Returns default values of specified setting",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names": {
      "get": {
        "operationId": "readSettingNames_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingName"
                }
              }
            },
            "description": "List of setting names"
          }
        },
        "summary": "Returns names of specified setting",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names/{name}": {
      "delete": {
        "operationId": "deleteSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Setting deleted successfully"
          }
        },
        "summary": "Deletes specified setting by id",
        "tags": [
          "Settings"
        ]
      },
      "post": {
        "operationId": "renameSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Setting name updated successfully"
          }
        },
        "summary": "Updates name of specified named setting",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names/{name}/content": {
      "get": {
        "operationId": "readSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "revision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsModel"
                }
              }
            },
            "description": "Setting content"
          }
        },
        "summary": "Returns values (content) of specified setting by its id and revision",
        "tags": [
          "Settings"
        ]
      },
      "put": {
        "operationId": "saveSetting_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Setting created/updated successfully"
          }
        },
        "summary": "Creates or updates named setting. Creation scenario will use default setting value if no body specified in the request.",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/settings/{feature}/names/{name}/revisions": {
      "get": {
        "operationId": "readRevisionsList_1",
        "parameters": [
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Revision"
                }
              }
            },
            "description": "List of revisions"
          }
        },
        "summary": "Returns revisions history of specified setting with specified id",
        "tags": [
          "Settings"
        ]
      }
    },
    "/api/version": {
      "get": {
        "operationId": "getVersion",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            },
            "description": "Version information"
          }
        },
        "summary": "Returns version of Polarion's extension",
        "tags": [
          "Extension Information"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BaseDocumentIdentifier": {
        "description": "Unique document identifier data without revision information, i.e. in HEAD revision",
        "properties": {
          "name": {
            "description": "Name of the document",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommunicationSettings": {
        "description": "Communication settings for JS client",
        "properties": {
          "chunkSize": {
            "description": "The number of requests to the server that are allowed to run in parallel",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Context": {
        "description": "Represents the context for building URLs related to Polarion services",
        "properties": {
          "baseUrl": {
            "description": "Returns the base URL constructed with the extension context",
            "example": "/polarion/pdf-exporter",
            "type": "string"
          },
          "extensionContext": {
            "description": "The extension context used as a base for URL construction",
            "example": "pdf-exporter",
            "type": "string"
          },
          "restUrl": {
            "description": "Returns the REST API URL constructed with the extension context",
            "example": "/polarion/pdf-exporter/rest",
            "type": "string"
          },
          "swaggerUiUrl": {
            "description": "Returns the Swagger UI URL for the REST API",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Document": {
        "description": "Represents a document within a project, including metadata such as projectID, space ID, and revision details",
        "properties": {
          "authorizedForMerge": {
            "description": "Indicates whether the user is authorized for merge operations",
            "type": "boolean"
          },
          "headRevision": {
            "description": "The head revision of the document",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the document",
            "type": "string"
          },
          "locationPath": {
            "description": "The location path of the document",
            "type": "string"
          },
          "moduleXmlRevision": {
            "description": "The XML revision of the module",
            "type": "string"
          },
          "projectId": {
            "description": "The ID of the project this document belongs to",
            "type": "string"
          },
          "projectName": {
            "description": "The name of the project this document belongs to",
            "type": "string"
          },
          "revision": {
            "description": "The current revision of the document",
            "type": "string"
          },
          "spaceId": {
            "description": "The ID of the space where the document is located",
            "type": "string"
          },
          "spaceName": {
            "type": "string"
          },
          "title": {
            "description": "The title of the document",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentDuplicateParams": {
        "description": "Parameters to create a document duplicated from another one",
        "properties": {
          "configName": {
            "description": "The configuration name to use for the duplication, which specifies which fields of work items to copy",
            "type": "string"
          },
          "linkRoleId": {
            "description": "ID of link role by which work items in target document will be linked with counterparts from source document",
            "type": "string"
          },
          "targetDocumentIdentifier": {
            "$ref": "#/components/schemas/BaseDocumentIdentifier"
          },
          "targetDocumentTitle": {
            "description": "Title of target document",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentIdentifier": {
        "description": "Unique document identifier data with optional revision information, if revision is not specified this means document is in HEAD revision",
        "properties": {
          "moduleXmlRevision": {
            "description": "XML module revision number",
            "type": "string"
          },
          "name": {
            "description": "Name of the document",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project",
            "type": "string"
          },
          "revision": {
            "description": "Revision number of the document",
            "type": "string"
          },
          "spaceId": {
            "description": "ID of the space",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentRevision": {
        "description": "Revision details",
        "properties": {
          "baselineName": {
            "description": "The baseline of the revision",
            "type": "string"
          },
          "name": {
            "description": "The name of the revision",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentWorkItem": {
        "description": "WorkItem in document data",
        "properties": {
          "documentLocationPath": {
            "description": "The location path of the document containing the WorkItem",
            "type": "string"
          },
          "documentProjectId": {
            "description": "The project ID of the document containing the WorkItem",
            "type": "string"
          },
          "documentRevision": {
            "description": "The revision of the document containing the WorkItem",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the WorkItem",
            "type": "string"
          },
          "projectId": {
            "description": "WorkItem's project ID, it can differ from document's project ID in case of referenced WorkItems",
            "type": "string"
          },
          "revision": {
            "description": "The revision of the WorkItem. Referenced WorkItem's can be frozen in document in certain revision",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentsDiff": {
        "description": "Represents the difference between two documents",
        "properties": {
          "extensionInfo": {
            "description": "Information about extension (version, build timestamp)",
            "type": "string"
          },
          "leftDocument": {
            "$ref": "#/components/schemas/Document"
          },
          "pairedWorkItems": {
            "$ref": "#/components/schemas/WorkItemsPair"
          },
          "rightDocument": {
            "$ref": "#/components/schemas/Document"
          }
        },
        "type": "object"
      },
      "DocumentsDiffParams": {
        "description": "Comparison input data",
        "properties": {
          "configCacheBucketId": {
            "description": "The ID of the configuration cache bucket",
            "type": "string"
          },
          "configName": {
            "description": "The configuration name to use for the comparison",
            "type": "string"
          },
          "leftDocument": {
            "$ref": "#/components/schemas/DocumentIdentifier"
          },
          "linkRole": {
            "description": "The role of the link connecting the two documents",
            "type": "string"
          },
          "rightDocument": {
            "$ref": "#/components/schemas/DocumentIdentifier"
          }
        },
        "type": "object"
      },
      "Field": {
        "description": "Represents a field within a work item",
        "properties": {
          "html": {
            "description": "HTML representation of the field",
            "type": "string"
          },
          "htmlDiff": {
            "description": "HTML diff representation of the field",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the field",
            "type": "string"
          },
          "issues": {
            "description": "Set of issues related to the field",
            "items": {
              "description": "Set of issues related to the field",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "Name of the field",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/IType"
          },
          "value": {
            "description": "Value of the field",
            "type": "object"
          }
        },
        "type": "object"
      },
      "FieldDiff": {
        "description": "Represents the differences between fields in WorkItems",
        "properties": {
          "diffLeft": {
            "description": "Difference on the left side",
            "type": "string"
          },
          "diffRight": {
            "description": "Difference on the right side",
            "type": "string"
          },
          "id": {
            "description": "Field ID",
            "type": "string"
          },
          "issues": {
            "description": "Set of issues related to this field",
            "items": {
              "description": "Set of issues related to this field",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "name": {
            "description": "Field name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HyperlinkRole": {
        "properties": {
          "combinedId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "workItemTypeId": {
            "type": "string"
          },
          "workItemTypeName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IStatusOpt": {
        "properties": {
          "default": {
            "type": "boolean"
          },
          "enumId": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phantom": {
            "type": "boolean"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "sequenceNumber": {
            "format": "int32",
            "type": "integer"
          },
          "terminal": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IType": {
        "description": "Type of the field",
        "type": "object"
      },
      "MergeParams": {
        "description": "Merge input data",
        "properties": {
          "allowReferencedWorkItemMerge": {
            "description": "Indicates if merging referenced Work Item allowed",
            "type": "boolean"
          },
          "configCacheBucketId": {
            "description": "The ID of the configuration cache bucket",
            "type": "string"
          },
          "configName": {
            "description": "The configuration name to use for the merge operation",
            "type": "string"
          },
          "direction": {
            "description": "Enum representing the direction of a merge operation",
            "enum": [
              "LEFT_TO_RIGHT",
              "RIGHT_TO_LEFT"
            ],
            "type": "string"
          },
          "leftDocument": {
            "$ref": "#/components/schemas/DocumentIdentifier"
          },
          "linkRole": {
            "description": "The role of the link connecting the two documents",
            "type": "string"
          },
          "pairs": {
            "$ref": "#/components/schemas/WorkItemsPair"
          },
          "rightDocument": {
            "$ref": "#/components/schemas/DocumentIdentifier"
          }
        },
        "type": "object"
      },
      "MergeReport": {
        "description": "Merge report with detailed information about the merge operation",
        "properties": {
          "conflicted": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "created": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "creationFailed": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "deleted": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "duplicateSkipped": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "logs": {
            "type": "string"
          },
          "mergeDetached": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "modified": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "moveFailed": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "moveSkipped": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "moved": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "prohibited": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/MergeReportEntry"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MergeReportEntry": {
        "properties": {
          "operationResultType": {
            "description": "Type of the operation result",
            "enum": [
              "CONFLICTED",
              "CREATED",
              "CREATION_FAILED",
              "DELETED",
              "DETACHED",
              "DUPLICATE_SKIPPED",
              "MODIFIED",
              "MOVED",
              "MOVE_SKIPPED",
              "MOVE_FAILED",
              "MOVED_FROM",
              "PROHIBITED",
              "WARNING"
            ],
            "type": "string"
          },
          "workItemsPair": {
            "$ref": "#/components/schemas/WorkItemsPair"
          }
        },
        "type": "object"
      },
      "MergeResult": {
        "description": "Result of a merge operation",
        "properties": {
          "mergeNotAuthorized": {
            "description": "Indicates whether the merge was not authorized",
            "type": "boolean"
          },
          "mergeReport": {
            "$ref": "#/components/schemas/MergeReport"
          },
          "success": {
            "description": "Indicates whether the merge operation was successful",
            "type": "boolean"
          },
          "targetModuleHasStructuralChanges": {
            "description": "Indicates whether the target module has structural changes",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Revision": {
        "description": "Revision details",
        "properties": {
          "author": {
            "description": "The author of the revision",
            "type": "string"
          },
          "baseline": {
            "description": "The baseline of the revision",
            "type": "string"
          },
          "date": {
            "description": "The date of the revision",
            "type": "string"
          },
          "description": {
            "description": "The description of the revision",
            "type": "string"
          },
          "name": {
            "description": "The name of the revision",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SettingName": {
        "properties": {
          "name": {
            "description": "The name of the setting",
            "type": "string"
          },
          "scope": {
            "description": "The scope of the setting",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SettingsModel": {
        "description": "Settings model",
        "properties": {
          "bundleTimestamp": {
            "description": "The bundle timestamp of the setting",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Space": {
        "description": "Represents a space within a project",
        "properties": {
          "id": {
            "description": "Space ID",
            "type": "string"
          },
          "name": {
            "description": "The name of the space",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StringsDiff": {
        "description": "Represents the result of comparing two strings",
        "properties": {
          "different": {
            "description": "Indicates whether the two strings are different",
            "type": "boolean"
          },
          "result": {
            "description": "The result after comparing the strings",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Version": {
        "description": "Details about the software version",
        "properties": {
          "automaticModuleName": {
            "description": "The automatic module name",
            "type": "string"
          },
          "bundleBuildTimestamp": {
            "description": "The build timestamp of the bundle",
            "type": "string"
          },
          "bundleName": {
            "description": "The name of the bundle",
            "type": "string"
          },
          "bundleVendor": {
            "description": "The vendor of the bundle",
            "type": "string"
          },
          "bundleVersion": {
            "description": "The version of the bundle",
            "type": "string"
          },
          "projectURL": {
            "description": "The project URL",
            "type": "string"
          },
          "supportEmail": {
            "description": "Support email for the bundle",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkItem": {
        "description": "Represents a WorkItem",
        "properties": {
          "externalProjectWorkItem": {
            "description": "Flag indicating whether the WorkItem is assigned to a different project",
            "type": "boolean"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/Field"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier of the WorkItem",
            "type": "string"
          },
          "lastRevision": {
            "description": "Last revision number of the WorkItem",
            "type": "string"
          },
          "moveDirection": {
            "description": "Enum representing the direction in which a merge move operation can occur",
            "enum": [
              "UP",
              "DOWN"
            ],
            "type": "string"
          },
          "movedOutlineNumber": {
            "description": "Moved outline number of the work item after a merge",
            "type": "string"
          },
          "outlineNumber": {
            "description": "Outline number of the WorkItem",
            "type": "string"
          },
          "projectId": {
            "description": "Project ID associated with the WorkItem",
            "type": "string"
          },
          "referenced": {
            "description": "Flag indicating whether the WorkItem is referenced",
            "type": "boolean"
          },
          "revision": {
            "description": "Revision number of the WorkItem",
            "type": "string"
          },
          "title": {
            "description": "Title of the WorkItem",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkItemField": {
        "description": "WorkItem field data",
        "properties": {
          "customField": {
            "description": "If field is custom",
            "type": "boolean"
          },
          "key": {
            "description": "Unique key for the field",
            "type": "string"
          },
          "name": {
            "description": "Name of the field",
            "type": "string"
          },
          "readOnly": {
            "description": "If field is read only",
            "type": "boolean"
          },
          "required": {
            "description": "If field is required",
            "type": "boolean"
          },
          "wiTypeId": {
            "description": "WorkItem type ID",
            "type": "string"
          },
          "wiTypeName": {
            "description": "WorkItem type name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkItemsDiff": {
        "description": "Represents the differences between two WorkItems",
        "properties": {
          "fieldDiffs": {
            "items": {
              "$ref": "#/components/schemas/FieldDiff"
            },
            "type": "array"
          },
          "leftWorkItem": {
            "$ref": "#/components/schemas/WorkItem"
          },
          "rightWorkItem": {
            "$ref": "#/components/schemas/WorkItem"
          }
        },
        "type": "object"
      },
      "WorkItemsDiffParams": {
        "description": "Comparison input data",
        "properties": {
          "compareEnumsById": {
            "description": "Indicates if enums must be compared by their ID",
            "type": "boolean"
          },
          "configCacheBucketId": {
            "description": "Cache bucket Id",
            "type": "string"
          },
          "configName": {
            "description": "Name of the configuration used for comparison",
            "type": "string"
          },
          "leftProjectId": {
            "description": "ID of the left project",
            "type": "string"
          },
          "leftWorkItem": {
            "$ref": "#/components/schemas/DocumentWorkItem"
          },
          "pairedWorkItemsDiffer": {
            "description": "Indicates if the paired WorkItems differ",
            "type": "boolean"
          },
          "pairedWorkItemsLinkRole": {
            "description": "Link role between paired WorkItems",
            "type": "string"
          },
          "rightWorkItem": {
            "$ref": "#/components/schemas/DocumentWorkItem"
          }
        },
        "type": "object"
      },
      "WorkItemsPair": {
        "description": "Represents a pair of WorkItems for comparison",
        "properties": {
          "leftWorkItem": {
            "$ref": "#/components/schemas/WorkItem"
          },
          "rightWorkItem": {
            "$ref": "#/components/schemas/WorkItem"
          }
        },
        "type": "object"
      }
    }
  }
}
